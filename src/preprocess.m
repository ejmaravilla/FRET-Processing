function preprocess(channels,parameters,folder)
% This function allows one to perform preprocessing steps that are required
% for any experiment. Just type in the channels you took pictures in and it
% will output perfectly overlayed images. The structure PreParams depends 
% on your experimental conditions (magnification, temperature, live vs fixed, 
% etc. and comes from the function PreParams_gen.m

% Brief overview of steps
% (1) X-Y Translational Registration
% (2) Radial Distortion Correction
% (3) Cropping to eliminate vignetting
% (4) Darkfield subtraction and shading correction (flatfielding)
% (5) Background subtraction

paramsName = file_search([parameters '\w+.mat'],folder);
PreParams = load(paramsName{1});

for i = 1:length(channels)
    imgNames = file_search(['\w+' channels{i} '.TIF'],folder);
    eval(sprintf('reg_x = PreParams.%s.xshift;',channels{i}))
    eval(sprintf('reg_y = PreParams.%s.yshift;',channels{i}))
    eval(sprintf('rad_k = PreParams.%s.k;',channels{i}))
    eval(sprintf('rad_ex = PreParams.%s.ex;',channels{i}))
    eval(sprintf('dark = PreParams.%s.dark;',channels{i}))
    eval(sprintf('shade = PreParams.%s.shade;',channels{i}))
    for j = 1:length(imgNames)
        %Load images
        img = single(imread(imgNames{j}));
        %XY Registration
        sz = size(img);
        [y,x] = ndgrid(1:sz(1),1:sz(2));
        img = interp2(x,y,img,x-reg_x,y-reg_y);
        %Radial Correction
        img = lensdistort1(img,rad_k,rad_ex,'ftype',5,'bordertype','fit');
        %Cropping to get rid of stupid pixels generated by radial and XY
        %translational corrections
        sz = size(img);
        crop = [round(0.05*sz(1)) round(0.05*sz(1)) round(0.9*sz(1)) round(0.9*sz(1))];
        img = imcrop(img,crop);
        %Darkfield subtraction + avg shade corrections both previously
        %registered, radially corrected and cropped
        img = img - dark;
        img = img./shade;
        %Background subtraction
        params.bin = 1;
        params.nozero = 0;
        img = bs_ff(img,params);
        %Write out as 32bit TIFs
        imwrite2tif(img,[],fullfile(folder,['pre_' imgNames{j}]),'single')
    end
end

end

